import 'dart:convert';import 'dart:io';import 'package:dio/dio.dart';import 'package:flutter/cupertino.dart';import 'package:get/get.dart';import 'package:http/http.dart' as http;class Main_screen_controller extends GetxController {  List chat = [];  final dio = Dio();  final api_key = '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';  TextEditingController send_controller = TextEditingController();  send_data(String txt) async {    if (await checkInternetConnection() == true){      try {        var response = await http.post(          Uri.parse('https://api.openai.com/v1/chat/completions'),          headers: {            'Content-Type': 'application/json',            'Authorization': 'Bearer $api_key',          },          body: jsonEncode({            "model": "gpt-3.5-turbo",            "messages": [{"role": "user", "content": "$txt"}],            "temperature": 0.7          }),        );        if (response.statusCode == 200) {          send_controller.clear();          var data = jsonDecode(response.body);          String responseText = utf8.decode(response.bodyBytes);          var decodedResponse = jsonDecode(responseText);          String content = decodedResponse['choices'][0]['message']['content'];          s_p(content);          chat.add({            'user': '$txt',            'gpt': '${content}',          });          update();        } else {          print('Failed to generate text: ${response.statusCode}');        }      }          catch(e){        s_p(e);            // Get.snackbar('${e.toString()}', '');          }    }else{s_p('no internet');    }  }  Future<bool> checkInternetConnection() async {    try {      final result = await InternetAddress.lookup('google.com');      if (result.isNotEmpty && result[0].rawAddress.isNotEmpty) {        return true;      }    } on SocketException catch (_) {      return false;    }    return false;  }  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  get_data(String txt) async {    final url = 'https://api.openai.com/v1/completions';    Map<String, String> headers = {      'Authorization': 'Bearer $api_key',    };    var body = jsonEncode({      "model": "text-davinci-003",      "prompt": "Say this is a test",      "max_tokens": 7,      "temperature": 0,      "top_p": 1,      "n": 1,      "stream": false,      "logprobs": null,      "stop": "\n"    });    try {      await http          .post(Uri.parse('$url'), headers: headers, body: body)          .then((value) {        print(value.body);      });      update();      Get.snackbar('Done', '');    } catch (e) {      Get.snackbar('${e.toString()}', '');      print('^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^');      print(e.toString());      print('^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^');    }  }  void test_ar() async {    var response = await http.post(      Uri.parse('https://api.openai.com/v1/engines/davinci/completions'),      headers: {        'Content-Type': 'application/json',        'Authorization': 'Bearer $api_key',      },      body: jsonEncode({        'prompt':            'Write a paragraph in Arabic about the importance of education',        'max_tokens': 50,        'temperature': 0.7,        'n': 1,        'stop': '\n',        'model': 'davinci',      }),    );    if (response.statusCode == 200) {      var data = jsonDecode(response.body);      var text = data['choices'][0]['text'];      print(text);    } else {      print('Failed to generate text: ${response.statusCode}');    }  }  @override  void onInit() {    // TODO: implement onInit    checkInternetConnection();    super.onInit();  }}s_p(var txt) {  print('######################');  print('######################');  print(txt.toString());  print('######################');  print('######################');}